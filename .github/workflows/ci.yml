name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main

permissions:
  contents: read
  checks: write

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build wget

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: |
          cd build
          cmake --build . -- -j$(nproc)

      - name: Upload build artifacts (optional)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/

  unit-tests:
    name: unit-tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Run CTest
        run: |
          if [ -d build ]; then
            cd build
            ctest --output-on-failure || (cat Testing/Temporary/LastTest.log || true; false)
          else
            echo "No build directory found" && exit 1
          fi

  security-scan:
    name: check-security-md
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install static tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck lua5.4

      - name: Run cppcheck
        run: |
          cppcheck --enable=warning,performance,portability --error-exitcode=1 core/ modules/ || true

      - name: Run clang-tidy (best-effort)
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON || true
          cd ..
          if command -v run-clang-tidy >/dev/null 2>&1; then
            run-clang-tidy -p build || true
          else
            echo "clang tidy not installed as runnable wrapper; skipping"
          fi

      - name: Run custom policy check-security-md script
        run: |
          if [ -f scripts/check-security-md.sh ]; then
            bash scripts/check-security-md.sh
          else
            echo "No check-security-md.sh found â€” skipping custom checks"
          fi

  integration-sim:
    name: integration-simulation
    runs-on: ubuntu-latest
    needs: [build, check-security-md]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run integration simulator
        run: |
          if [ -f build/simulate_packet_input ]; then
            ./build/simulate_packet_input --mode=integration --episodes=5
          elif [ -f build/runtime/ibcs_runtime ]; then
            ./build/runtime/ibcs_runtime --simulate --episodes=5
          else
            echo "No simulator binary found; skipping integration sim"
          fi

  canary:
    name: canary-simulation
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/feature/')
    needs: [build, check-security-md]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run canary mode (optional)
        run: |
          if [ -f build/simulate_packet_input ]; then
            ./build/simulate_packet_input --mode=canary --canary_pct=5 --episodes=3
          else
            echo "No canary-capable binary found; skipping"
          fi
